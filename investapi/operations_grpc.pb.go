// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: operations.proto

package investapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OperationsService_GetOperations_FullMethodName             = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations"
	OperationsService_GetPortfolio_FullMethodName              = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio"
	OperationsService_GetPositions_FullMethodName              = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions"
	OperationsService_GetWithdrawLimits_FullMethodName         = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits"
	OperationsService_GetBrokerReport_FullMethodName           = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport"
	OperationsService_GetDividendsForeignIssuer_FullMethodName = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer"
	OperationsService_GetOperationsByCursor_FullMethodName     = "/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor"
)

// OperationsServiceClient is the client API for OperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationsServiceClient interface {
	// GetOperations — список операций по счету
	// При работе с методом учитывайте [особенности взаимодействия](/invest/services/operations/operations_problems).
	GetOperations(ctx context.Context, in *OperationsRequest, opts ...grpc.CallOption) (*OperationsResponse, error)
	// GetPortfolio — портфель по счету
	GetPortfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error)
	// GetPositions — список позиций по счету
	GetPositions(ctx context.Context, in *PositionsRequest, opts ...grpc.CallOption) (*PositionsResponse, error)
	// GetWithdrawLimits — доступный остаток для вывода средств
	GetWithdrawLimits(ctx context.Context, in *WithdrawLimitsRequest, opts ...grpc.CallOption) (*WithdrawLimitsResponse, error)
	// GetBrokerReport — брокерский отчет.
	GetBrokerReport(ctx context.Context, in *BrokerReportRequest, opts ...grpc.CallOption) (*BrokerReportResponse, error)
	// GetDividendsForeignIssuer — отчет «Справка о доходах за пределами РФ»
	GetDividendsForeignIssuer(ctx context.Context, in *GetDividendsForeignIssuerRequest, opts ...grpc.CallOption) (*GetDividendsForeignIssuerResponse, error)
	// GetOperationsByCursor — список операций по счету с пагинацией
	// При работе с методом учитывайте [особенности взаимодействия](/invest/services/operations/operations_problems).
	GetOperationsByCursor(ctx context.Context, in *GetOperationsByCursorRequest, opts ...grpc.CallOption) (*GetOperationsByCursorResponse, error)
}

type operationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationsServiceClient(cc grpc.ClientConnInterface) OperationsServiceClient {
	return &operationsServiceClient{cc}
}

func (c *operationsServiceClient) GetOperations(ctx context.Context, in *OperationsRequest, opts ...grpc.CallOption) (*OperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationsResponse)
	err := c.cc.Invoke(ctx, OperationsService_GetOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsServiceClient) GetPortfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortfolioResponse)
	err := c.cc.Invoke(ctx, OperationsService_GetPortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsServiceClient) GetPositions(ctx context.Context, in *PositionsRequest, opts ...grpc.CallOption) (*PositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionsResponse)
	err := c.cc.Invoke(ctx, OperationsService_GetPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsServiceClient) GetWithdrawLimits(ctx context.Context, in *WithdrawLimitsRequest, opts ...grpc.CallOption) (*WithdrawLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawLimitsResponse)
	err := c.cc.Invoke(ctx, OperationsService_GetWithdrawLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsServiceClient) GetBrokerReport(ctx context.Context, in *BrokerReportRequest, opts ...grpc.CallOption) (*BrokerReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrokerReportResponse)
	err := c.cc.Invoke(ctx, OperationsService_GetBrokerReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsServiceClient) GetDividendsForeignIssuer(ctx context.Context, in *GetDividendsForeignIssuerRequest, opts ...grpc.CallOption) (*GetDividendsForeignIssuerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDividendsForeignIssuerResponse)
	err := c.cc.Invoke(ctx, OperationsService_GetDividendsForeignIssuer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsServiceClient) GetOperationsByCursor(ctx context.Context, in *GetOperationsByCursorRequest, opts ...grpc.CallOption) (*GetOperationsByCursorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationsByCursorResponse)
	err := c.cc.Invoke(ctx, OperationsService_GetOperationsByCursor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationsServiceServer is the server API for OperationsService service.
// All implementations must embed UnimplementedOperationsServiceServer
// for forward compatibility.
type OperationsServiceServer interface {
	// GetOperations — список операций по счету
	// При работе с методом учитывайте [особенности взаимодействия](/invest/services/operations/operations_problems).
	GetOperations(context.Context, *OperationsRequest) (*OperationsResponse, error)
	// GetPortfolio — портфель по счету
	GetPortfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error)
	// GetPositions — список позиций по счету
	GetPositions(context.Context, *PositionsRequest) (*PositionsResponse, error)
	// GetWithdrawLimits — доступный остаток для вывода средств
	GetWithdrawLimits(context.Context, *WithdrawLimitsRequest) (*WithdrawLimitsResponse, error)
	// GetBrokerReport — брокерский отчет.
	GetBrokerReport(context.Context, *BrokerReportRequest) (*BrokerReportResponse, error)
	// GetDividendsForeignIssuer — отчет «Справка о доходах за пределами РФ»
	GetDividendsForeignIssuer(context.Context, *GetDividendsForeignIssuerRequest) (*GetDividendsForeignIssuerResponse, error)
	// GetOperationsByCursor — список операций по счету с пагинацией
	// При работе с методом учитывайте [особенности взаимодействия](/invest/services/operations/operations_problems).
	GetOperationsByCursor(context.Context, *GetOperationsByCursorRequest) (*GetOperationsByCursorResponse, error)
	mustEmbedUnimplementedOperationsServiceServer()
}

// UnimplementedOperationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperationsServiceServer struct{}

func (UnimplementedOperationsServiceServer) GetOperations(context.Context, *OperationsRequest) (*OperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedOperationsServiceServer) GetPortfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedOperationsServiceServer) GetPositions(context.Context, *PositionsRequest) (*PositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositions not implemented")
}
func (UnimplementedOperationsServiceServer) GetWithdrawLimits(context.Context, *WithdrawLimitsRequest) (*WithdrawLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawLimits not implemented")
}
func (UnimplementedOperationsServiceServer) GetBrokerReport(context.Context, *BrokerReportRequest) (*BrokerReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerReport not implemented")
}
func (UnimplementedOperationsServiceServer) GetDividendsForeignIssuer(context.Context, *GetDividendsForeignIssuerRequest) (*GetDividendsForeignIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDividendsForeignIssuer not implemented")
}
func (UnimplementedOperationsServiceServer) GetOperationsByCursor(context.Context, *GetOperationsByCursorRequest) (*GetOperationsByCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationsByCursor not implemented")
}
func (UnimplementedOperationsServiceServer) mustEmbedUnimplementedOperationsServiceServer() {}
func (UnimplementedOperationsServiceServer) testEmbeddedByValue()                           {}

// UnsafeOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationsServiceServer will
// result in compilation errors.
type UnsafeOperationsServiceServer interface {
	mustEmbedUnimplementedOperationsServiceServer()
}

func RegisterOperationsServiceServer(s grpc.ServiceRegistrar, srv OperationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedOperationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperationsService_ServiceDesc, srv)
}

func _OperationsService_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_GetOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).GetOperations(ctx, req.(*OperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationsService_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_GetPortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).GetPortfolio(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationsService_GetPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).GetPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_GetPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).GetPositions(ctx, req.(*PositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationsService_GetWithdrawLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).GetWithdrawLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_GetWithdrawLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).GetWithdrawLimits(ctx, req.(*WithdrawLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationsService_GetBrokerReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).GetBrokerReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_GetBrokerReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).GetBrokerReport(ctx, req.(*BrokerReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationsService_GetDividendsForeignIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDividendsForeignIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).GetDividendsForeignIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_GetDividendsForeignIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).GetDividendsForeignIssuer(ctx, req.(*GetDividendsForeignIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationsService_GetOperationsByCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsByCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).GetOperationsByCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_GetOperationsByCursor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).GetOperationsByCursor(ctx, req.(*GetOperationsByCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperationsService_ServiceDesc is the grpc.ServiceDesc for OperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinkoff.public.invest.api.contract.v1.OperationsService",
	HandlerType: (*OperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOperations",
			Handler:    _OperationsService_GetOperations_Handler,
		},
		{
			MethodName: "GetPortfolio",
			Handler:    _OperationsService_GetPortfolio_Handler,
		},
		{
			MethodName: "GetPositions",
			Handler:    _OperationsService_GetPositions_Handler,
		},
		{
			MethodName: "GetWithdrawLimits",
			Handler:    _OperationsService_GetWithdrawLimits_Handler,
		},
		{
			MethodName: "GetBrokerReport",
			Handler:    _OperationsService_GetBrokerReport_Handler,
		},
		{
			MethodName: "GetDividendsForeignIssuer",
			Handler:    _OperationsService_GetDividendsForeignIssuer_Handler,
		},
		{
			MethodName: "GetOperationsByCursor",
			Handler:    _OperationsService_GetOperationsByCursor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operations.proto",
}

const (
	OperationsStreamService_PortfolioStream_FullMethodName = "/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PortfolioStream"
	OperationsStreamService_PositionsStream_FullMethodName = "/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PositionsStream"
)

// OperationsStreamServiceClient is the client API for OperationsStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationsStreamServiceClient interface {
	// PortfolioStream — стрим обновлений портфеля
	PortfolioStream(ctx context.Context, in *PortfolioStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PortfolioStreamResponse], error)
	// PositionsStream — стрим обновлений информации по изменению позиций портфеля
	PositionsStream(ctx context.Context, in *PositionsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionsStreamResponse], error)
}

type operationsStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationsStreamServiceClient(cc grpc.ClientConnInterface) OperationsStreamServiceClient {
	return &operationsStreamServiceClient{cc}
}

func (c *operationsStreamServiceClient) PortfolioStream(ctx context.Context, in *PortfolioStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PortfolioStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperationsStreamService_ServiceDesc.Streams[0], OperationsStreamService_PortfolioStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PortfolioStreamRequest, PortfolioStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperationsStreamService_PortfolioStreamClient = grpc.ServerStreamingClient[PortfolioStreamResponse]

func (c *operationsStreamServiceClient) PositionsStream(ctx context.Context, in *PositionsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionsStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperationsStreamService_ServiceDesc.Streams[1], OperationsStreamService_PositionsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PositionsStreamRequest, PositionsStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperationsStreamService_PositionsStreamClient = grpc.ServerStreamingClient[PositionsStreamResponse]

// OperationsStreamServiceServer is the server API for OperationsStreamService service.
// All implementations must embed UnimplementedOperationsStreamServiceServer
// for forward compatibility.
type OperationsStreamServiceServer interface {
	// PortfolioStream — стрим обновлений портфеля
	PortfolioStream(*PortfolioStreamRequest, grpc.ServerStreamingServer[PortfolioStreamResponse]) error
	// PositionsStream — стрим обновлений информации по изменению позиций портфеля
	PositionsStream(*PositionsStreamRequest, grpc.ServerStreamingServer[PositionsStreamResponse]) error
	mustEmbedUnimplementedOperationsStreamServiceServer()
}

// UnimplementedOperationsStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperationsStreamServiceServer struct{}

func (UnimplementedOperationsStreamServiceServer) PortfolioStream(*PortfolioStreamRequest, grpc.ServerStreamingServer[PortfolioStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PortfolioStream not implemented")
}
func (UnimplementedOperationsStreamServiceServer) PositionsStream(*PositionsStreamRequest, grpc.ServerStreamingServer[PositionsStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PositionsStream not implemented")
}
func (UnimplementedOperationsStreamServiceServer) mustEmbedUnimplementedOperationsStreamServiceServer() {
}
func (UnimplementedOperationsStreamServiceServer) testEmbeddedByValue() {}

// UnsafeOperationsStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationsStreamServiceServer will
// result in compilation errors.
type UnsafeOperationsStreamServiceServer interface {
	mustEmbedUnimplementedOperationsStreamServiceServer()
}

func RegisterOperationsStreamServiceServer(s grpc.ServiceRegistrar, srv OperationsStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedOperationsStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperationsStreamService_ServiceDesc, srv)
}

func _OperationsStreamService_PortfolioStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortfolioStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationsStreamServiceServer).PortfolioStream(m, &grpc.GenericServerStream[PortfolioStreamRequest, PortfolioStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperationsStreamService_PortfolioStreamServer = grpc.ServerStreamingServer[PortfolioStreamResponse]

func _OperationsStreamService_PositionsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositionsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationsStreamServiceServer).PositionsStream(m, &grpc.GenericServerStream[PositionsStreamRequest, PositionsStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperationsStreamService_PositionsStreamServer = grpc.ServerStreamingServer[PositionsStreamResponse]

// OperationsStreamService_ServiceDesc is the grpc.ServiceDesc for OperationsStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationsStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinkoff.public.invest.api.contract.v1.OperationsStreamService",
	HandlerType: (*OperationsStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PortfolioStream",
			Handler:       _OperationsStreamService_PortfolioStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PositionsStream",
			Handler:       _OperationsStreamService_PositionsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "operations.proto",
}
