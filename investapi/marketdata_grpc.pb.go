// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: marketdata.proto

package investapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarketDataService_GetCandles_FullMethodName         = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles"
	MarketDataService_GetLastPrices_FullMethodName      = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices"
	MarketDataService_GetOrderBook_FullMethodName       = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook"
	MarketDataService_GetTradingStatus_FullMethodName   = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus"
	MarketDataService_GetTradingStatuses_FullMethodName = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses"
	MarketDataService_GetLastTrades_FullMethodName      = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades"
	MarketDataService_GetClosePrices_FullMethodName     = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices"
	MarketDataService_GetTechAnalysis_FullMethodName    = "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTechAnalysis"
)

// MarketDataServiceClient is the client API for MarketDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketDataServiceClient interface {
	// Запросить исторические свечи по инструменту.
	GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error)
	// Запросить цены последних сделок по инструментам.
	GetLastPrices(ctx context.Context, in *GetLastPricesRequest, opts ...grpc.CallOption) (*GetLastPricesResponse, error)
	// Получить стакан по инструменту.
	GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*GetOrderBookResponse, error)
	// Запросить статус торгов по инструментам.
	GetTradingStatus(ctx context.Context, in *GetTradingStatusRequest, opts ...grpc.CallOption) (*GetTradingStatusResponse, error)
	// Запросить статус торгов по инструментам.
	GetTradingStatuses(ctx context.Context, in *GetTradingStatusesRequest, opts ...grpc.CallOption) (*GetTradingStatusesResponse, error)
	// Запросить обезличенные сделки за последний час.
	GetLastTrades(ctx context.Context, in *GetLastTradesRequest, opts ...grpc.CallOption) (*GetLastTradesResponse, error)
	// Запросить цены закрытия торговой сессии по инструментам.
	GetClosePrices(ctx context.Context, in *GetClosePricesRequest, opts ...grpc.CallOption) (*GetClosePricesResponse, error)
	// Получить технические индикаторы по инструменту.
	GetTechAnalysis(ctx context.Context, in *GetTechAnalysisRequest, opts ...grpc.CallOption) (*GetTechAnalysisResponse, error)
}

type marketDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketDataServiceClient(cc grpc.ClientConnInterface) MarketDataServiceClient {
	return &marketDataServiceClient{cc}
}

func (c *marketDataServiceClient) GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCandlesResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetCandles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetLastPrices(ctx context.Context, in *GetLastPricesRequest, opts ...grpc.CallOption) (*GetLastPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLastPricesResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetLastPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*GetOrderBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderBookResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetTradingStatus(ctx context.Context, in *GetTradingStatusRequest, opts ...grpc.CallOption) (*GetTradingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTradingStatusResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetTradingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetTradingStatuses(ctx context.Context, in *GetTradingStatusesRequest, opts ...grpc.CallOption) (*GetTradingStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTradingStatusesResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetTradingStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetLastTrades(ctx context.Context, in *GetLastTradesRequest, opts ...grpc.CallOption) (*GetLastTradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLastTradesResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetLastTrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetClosePrices(ctx context.Context, in *GetClosePricesRequest, opts ...grpc.CallOption) (*GetClosePricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClosePricesResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetClosePrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetTechAnalysis(ctx context.Context, in *GetTechAnalysisRequest, opts ...grpc.CallOption) (*GetTechAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTechAnalysisResponse)
	err := c.cc.Invoke(ctx, MarketDataService_GetTechAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketDataServiceServer is the server API for MarketDataService service.
// All implementations must embed UnimplementedMarketDataServiceServer
// for forward compatibility.
type MarketDataServiceServer interface {
	// Запросить исторические свечи по инструменту.
	GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error)
	// Запросить цены последних сделок по инструментам.
	GetLastPrices(context.Context, *GetLastPricesRequest) (*GetLastPricesResponse, error)
	// Получить стакан по инструменту.
	GetOrderBook(context.Context, *GetOrderBookRequest) (*GetOrderBookResponse, error)
	// Запросить статус торгов по инструментам.
	GetTradingStatus(context.Context, *GetTradingStatusRequest) (*GetTradingStatusResponse, error)
	// Запросить статус торгов по инструментам.
	GetTradingStatuses(context.Context, *GetTradingStatusesRequest) (*GetTradingStatusesResponse, error)
	// Запросить обезличенные сделки за последний час.
	GetLastTrades(context.Context, *GetLastTradesRequest) (*GetLastTradesResponse, error)
	// Запросить цены закрытия торговой сессии по инструментам.
	GetClosePrices(context.Context, *GetClosePricesRequest) (*GetClosePricesResponse, error)
	// Получить технические индикаторы по инструменту.
	GetTechAnalysis(context.Context, *GetTechAnalysisRequest) (*GetTechAnalysisResponse, error)
	mustEmbedUnimplementedMarketDataServiceServer()
}

// UnimplementedMarketDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketDataServiceServer struct{}

func (UnimplementedMarketDataServiceServer) GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandles not implemented")
}
func (UnimplementedMarketDataServiceServer) GetLastPrices(context.Context, *GetLastPricesRequest) (*GetLastPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastPrices not implemented")
}
func (UnimplementedMarketDataServiceServer) GetOrderBook(context.Context, *GetOrderBookRequest) (*GetOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBook not implemented")
}
func (UnimplementedMarketDataServiceServer) GetTradingStatus(context.Context, *GetTradingStatusRequest) (*GetTradingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradingStatus not implemented")
}
func (UnimplementedMarketDataServiceServer) GetTradingStatuses(context.Context, *GetTradingStatusesRequest) (*GetTradingStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradingStatuses not implemented")
}
func (UnimplementedMarketDataServiceServer) GetLastTrades(context.Context, *GetLastTradesRequest) (*GetLastTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastTrades not implemented")
}
func (UnimplementedMarketDataServiceServer) GetClosePrices(context.Context, *GetClosePricesRequest) (*GetClosePricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClosePrices not implemented")
}
func (UnimplementedMarketDataServiceServer) GetTechAnalysis(context.Context, *GetTechAnalysisRequest) (*GetTechAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTechAnalysis not implemented")
}
func (UnimplementedMarketDataServiceServer) mustEmbedUnimplementedMarketDataServiceServer() {}
func (UnimplementedMarketDataServiceServer) testEmbeddedByValue()                           {}

// UnsafeMarketDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketDataServiceServer will
// result in compilation errors.
type UnsafeMarketDataServiceServer interface {
	mustEmbedUnimplementedMarketDataServiceServer()
}

func RegisterMarketDataServiceServer(s grpc.ServiceRegistrar, srv MarketDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarketDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketDataService_ServiceDesc, srv)
}

func _MarketDataService_GetCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetCandles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetCandles(ctx, req.(*GetCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetLastPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetLastPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetLastPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetLastPrices(ctx, req.(*GetLastPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetOrderBook(ctx, req.(*GetOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetTradingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetTradingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetTradingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetTradingStatus(ctx, req.(*GetTradingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetTradingStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradingStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetTradingStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetTradingStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetTradingStatuses(ctx, req.(*GetTradingStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetLastTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetLastTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetLastTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetLastTrades(ctx, req.(*GetLastTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetClosePrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClosePricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetClosePrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetClosePrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetClosePrices(ctx, req.(*GetClosePricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetTechAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTechAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetTechAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetTechAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetTechAnalysis(ctx, req.(*GetTechAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketDataService_ServiceDesc is the grpc.ServiceDesc for MarketDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinkoff.public.invest.api.contract.v1.MarketDataService",
	HandlerType: (*MarketDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandles",
			Handler:    _MarketDataService_GetCandles_Handler,
		},
		{
			MethodName: "GetLastPrices",
			Handler:    _MarketDataService_GetLastPrices_Handler,
		},
		{
			MethodName: "GetOrderBook",
			Handler:    _MarketDataService_GetOrderBook_Handler,
		},
		{
			MethodName: "GetTradingStatus",
			Handler:    _MarketDataService_GetTradingStatus_Handler,
		},
		{
			MethodName: "GetTradingStatuses",
			Handler:    _MarketDataService_GetTradingStatuses_Handler,
		},
		{
			MethodName: "GetLastTrades",
			Handler:    _MarketDataService_GetLastTrades_Handler,
		},
		{
			MethodName: "GetClosePrices",
			Handler:    _MarketDataService_GetClosePrices_Handler,
		},
		{
			MethodName: "GetTechAnalysis",
			Handler:    _MarketDataService_GetTechAnalysis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketdata.proto",
}

const (
	MarketDataStreamService_MarketDataStream_FullMethodName           = "/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataStream"
	MarketDataStreamService_MarketDataServerSideStream_FullMethodName = "/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataServerSideStream"
)

// MarketDataStreamServiceClient is the client API for MarketDataStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketDataStreamServiceClient interface {
	// Bidirectional-стрим предоставления биржевой информации.
	MarketDataStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MarketDataRequest, MarketDataResponse], error)
	// Server-side стрим предоставления биржевой информации.
	MarketDataServerSideStream(ctx context.Context, in *MarketDataServerSideStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarketDataResponse], error)
}

type marketDataStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketDataStreamServiceClient(cc grpc.ClientConnInterface) MarketDataStreamServiceClient {
	return &marketDataStreamServiceClient{cc}
}

func (c *marketDataStreamServiceClient) MarketDataStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MarketDataRequest, MarketDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataStreamService_ServiceDesc.Streams[0], MarketDataStreamService_MarketDataStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MarketDataRequest, MarketDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataStreamService_MarketDataStreamClient = grpc.BidiStreamingClient[MarketDataRequest, MarketDataResponse]

func (c *marketDataStreamServiceClient) MarketDataServerSideStream(ctx context.Context, in *MarketDataServerSideStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarketDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataStreamService_ServiceDesc.Streams[1], MarketDataStreamService_MarketDataServerSideStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MarketDataServerSideStreamRequest, MarketDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataStreamService_MarketDataServerSideStreamClient = grpc.ServerStreamingClient[MarketDataResponse]

// MarketDataStreamServiceServer is the server API for MarketDataStreamService service.
// All implementations must embed UnimplementedMarketDataStreamServiceServer
// for forward compatibility.
type MarketDataStreamServiceServer interface {
	// Bidirectional-стрим предоставления биржевой информации.
	MarketDataStream(grpc.BidiStreamingServer[MarketDataRequest, MarketDataResponse]) error
	// Server-side стрим предоставления биржевой информации.
	MarketDataServerSideStream(*MarketDataServerSideStreamRequest, grpc.ServerStreamingServer[MarketDataResponse]) error
	mustEmbedUnimplementedMarketDataStreamServiceServer()
}

// UnimplementedMarketDataStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketDataStreamServiceServer struct{}

func (UnimplementedMarketDataStreamServiceServer) MarketDataStream(grpc.BidiStreamingServer[MarketDataRequest, MarketDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MarketDataStream not implemented")
}
func (UnimplementedMarketDataStreamServiceServer) MarketDataServerSideStream(*MarketDataServerSideStreamRequest, grpc.ServerStreamingServer[MarketDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MarketDataServerSideStream not implemented")
}
func (UnimplementedMarketDataStreamServiceServer) mustEmbedUnimplementedMarketDataStreamServiceServer() {
}
func (UnimplementedMarketDataStreamServiceServer) testEmbeddedByValue() {}

// UnsafeMarketDataStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketDataStreamServiceServer will
// result in compilation errors.
type UnsafeMarketDataStreamServiceServer interface {
	mustEmbedUnimplementedMarketDataStreamServiceServer()
}

func RegisterMarketDataStreamServiceServer(s grpc.ServiceRegistrar, srv MarketDataStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarketDataStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketDataStreamService_ServiceDesc, srv)
}

func _MarketDataStreamService_MarketDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarketDataStreamServiceServer).MarketDataStream(&grpc.GenericServerStream[MarketDataRequest, MarketDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataStreamService_MarketDataStreamServer = grpc.BidiStreamingServer[MarketDataRequest, MarketDataResponse]

func _MarketDataStreamService_MarketDataServerSideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDataServerSideStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataStreamServiceServer).MarketDataServerSideStream(m, &grpc.GenericServerStream[MarketDataServerSideStreamRequest, MarketDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataStreamService_MarketDataServerSideStreamServer = grpc.ServerStreamingServer[MarketDataResponse]

// MarketDataStreamService_ServiceDesc is the grpc.ServiceDesc for MarketDataStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketDataStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinkoff.public.invest.api.contract.v1.MarketDataStreamService",
	HandlerType: (*MarketDataStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MarketDataStream",
			Handler:       _MarketDataStreamService_MarketDataStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MarketDataServerSideStream",
			Handler:       _MarketDataStreamService_MarketDataServerSideStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "marketdata.proto",
}
